{"version":3,"sources":["clear.png","cloudy.png","rain.png","components/Header.js","components/WeatherData.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","handleChange","event","target","name","value","setState","state","city","handleSubmit","bind","preventDefault","this","props","getWeather","className","onSubmit","placeholder","type","onChange","Component","WeatherData","console","log","data","temp","country","humidity","desc","image","src","alt","Weather","text","conditions","clear","clouds","rain","status","style","textAlign","undefined","App","loading","fetch","then","res","json","weather","sys","main","cod","description","catch","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.59aa82c0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clear.6cc385cd.png\";","module.exports = __webpack_public_path__ + \"static/media/cloudy.b712ba21.png\";","module.exports = __webpack_public_path__ + \"static/media/rain.ec8108a2.png\";","import React, { Component } from \"react\";\r\n\r\nexport class Header extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      city: \"\",\r\n    };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    this.setState ({ [name]: value });\r\n  };\r\n\r\n   handleSubmit(event){\r\n       event.preventDefault();\r\n      this.props.getWeather(this.state.city);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"header\">\r\n        <header>Weather App</header>\r\n        <form className='input-form' onSubmit={this.handleSubmit}>\r\n          <input\r\n          className = 'input'\r\n            placeholder=\"Enter City\"\r\n            type=\"text\"\r\n            name=\"city\"\r\n            value={this.state.city}\r\n            onChange={this.handleChange}\r\n          />\r\n          <button>Search</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react'\r\n\r\n\r\nexport default function WeatherData(props) {\r\n\r\n    console.log('jaja', props.data);\r\n    const { temp, city, country, humidity, desc } = props.data;\r\n    let image =props.image;\r\n   \r\n    return (\r\n     \r\n    <div className=\"container\">\r\n    <img src={image} alt=\"\"/>\r\n    <div className=\"info\">\r\n      <div className=\"location\">\r\n        <h2>{city}</h2>\r\n        <h3>{country}</h3>\r\n      </div>\r\n      <div className=\"data\">\r\n        <h2>{desc}</h2>\r\n        <h2>Temperature: {temp} </h2>\r\n      </div>\r\n    </div>\r\n    <h4>Pressure : {humidity}</h4>\r\n  </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport clear from \"../clear.png\";\r\nimport clouds from \"../cloudy.png\";\r\nimport rain from \"../rain.png\";\r\nimport WeatherData from './WeatherData'\r\nexport default function Weather(props) {\r\n  let text;\r\n  let image;\r\n  const {conditions } = props;\r\n  if (conditions === \"Clear\") {\r\n    image = clear;\r\n  } else if (conditions === \"Clouds\") {\r\n    image = clouds;\r\n  } else if (conditions === \"Rain\") {\r\n    image = rain;\r\n  }\r\n  props.status === 404 ? (text = <h1 style={{textAlign:'center'}}>City not found, Please Try Again</h1>) : \r\n                            (text = <WeatherData data={props} image={image}/>);\r\n\r\nif(props.city === undefined) return <h1 style={{textAlign:'center'}}>Please enter a city</h1>;\r\n\r\n  return (\r\n      <div>\r\n          {text}\r\n      </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport Weather from \"./components/Weather\";\nexport class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      weather: \"\",\n      country: undefined,\n      city: undefined,\n      temp: undefined,\n      conditions: undefined,\n      status: \"\",\n      humidity: undefined,\n      loading: false,\n    };\n  }\n\n  getWeather = (city) => {\n    this.setState({ loading: true });\n    fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=a0886fb1ae4fe7864daeca433861cf67`\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        this.setState({\n          loading: false,\n          weather: { data },\n          country: data.sys.country,\n          temp: (data.main.temp),\n          status: data.cod,\n          conditions: data.weather[0].main,\n          desc: data.weather[0].description,\n          city: data.name,\n          humidity: data.main.humidity,\n        });\n      })\n      .catch(() => {\n        console.log(\"error\");\n        this.setState({ loading: false, status: 404 });\n      });\n  };\n\n  render() {\n    let text;\n    if (this.state.loading === true) {\n      text = <h1 style={{ textAlign: \"Center\" }}>Loading</h1>;\n    } else {\n      text = (\n        <Weather\n          data={this.state.weather}\n          country={this.state.country}\n          city={this.state.city}\n          humidity={this.state.humidity}\n          conditions={this.state.conditions}\n          desc={this.state.desc}\n          status={this.state.status}\n          temp={this.state.temp}\n        />\n      );\n    }\n    return (\n      <React.Fragment>\n        <Header getWeather={this.getWeather} />\n        {text}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <StrictMode>\n <App />\n    </StrictMode>\n   ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}